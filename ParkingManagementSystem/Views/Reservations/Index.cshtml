@*@model IEnumerable<ParkingManagementSystem.Models.Reservation>*@

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model ReservationParkingspaceViewModel
<!-- use @Model.Reservations and @Model.ParkingSpaces to access the data -->
@{
    ViewData["Title"] = "Index";
}
<link rel="stylesheet" href="~/css/reservation-index.css"/>
<div class="container-searching">
    <form action="@Url.Action("Index", "Reservations")" method="get">
        <div class="form-group">
            <label for="searchDate" class="control-label">Search Start Date:</label>
            <input type="datetime-local" id="searchStartDate" name="searchStartDate" class="form-control" value="@ViewData["SearchStartDate"]" />
        </div>
        <div class="form-group">
            <label for="searchDate" class="control-label">Search End Date:</label>
            <input type="datetime-local" id="searchEndDate" name="searchEndDate" class="form-control" value="@ViewData["SearchEndDate"]"/>
        </div>
        <button type="submit" class="btn btn-primary">Search</button>
    </form>
</div>
<div class="container-body">
    <div class="sidebar sidebar-second">
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="" asp-controller="Reservations" asp-action="YourIndex">History Reservation</a>
            </li>
        </ul>
    </div>
    <div class="seat-grid">
        <!-- parking lot area C -->
        <div class="row row__C">
            @foreach (var item in Model.ParkingSpaces.Take(12))
            {
                DateTime searchStartDate = DateTime.MinValue;
                DateTime searchEndDate = DateTime.MaxValue;

                if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]))
                {
                    searchStartDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]);
                }

                if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]))
                {
                    searchEndDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]);
                }

                var reservations = Model.Reservations.Where(r => r.ParkingSpaceId == item.Id &&
                ((r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate) ||
                (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime <= searchEndDate) ||
                (r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                (r.ReservationStartTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime >= searchEndDate) ||
                (r.ReservationEndTime <= searchStartDate && r.ReservationEndTime <= searchEndDate)
                ));

                bool isReserved = reservations.Any(r => r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate);

                string availabilityStatus = isReserved ? "reserved" : "available";

                <div class="seat seat__C" parking-space-id="@item.Id" state="@availabilityStatus">@item.Location</div>
            }
            <div class="seat seat__C seat__Area">Area C</div>
        </div>
        <!-- parking lot area B -->
        <div class="row row__B">
            <div class="row">
                @foreach (var item in Model.ParkingSpaces.Where(p => p.Id >= 13 && p.Id <= 22))
                {
                    DateTime searchStartDate = DateTime.MinValue;
                    DateTime searchEndDate = DateTime.MaxValue;

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]))
                    {
                        searchStartDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]);
                    }

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]))
                    {
                        searchEndDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]);
                    }

                    var reservations = Model.Reservations.Where(r => r.ParkingSpaceId == item.Id &&
                    ((r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime <= searchEndDate) ||
                    (r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime >= searchEndDate) ||
                    (r.ReservationEndTime <= searchStartDate && r.ReservationEndTime <= searchEndDate)
                    ));

                    bool isReserved = reservations.Any(r => r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate);

                    string availabilityStatus = isReserved ? "reserved" : "available";


                    <div class="seat seat__B" parking-space-id="@item.Id" state="@availabilityStatus">@item.Location</div>
                }
                <div class="seat seat__B seat__Area">Area B</div>
            </div>
            <div class="row">
                @foreach (var item in Model.ParkingSpaces.Where(p => p.Id >= 23 && p.Id <= 32))
                {

                    DateTime searchStartDate = DateTime.MinValue;
                    DateTime searchEndDate = DateTime.MaxValue;

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]))
                    {
                        searchStartDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]);
                    }

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]))
                    {
                        searchEndDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]);
                    }

                    var reservations = Model.Reservations.Where(r => r.ParkingSpaceId == item.Id &&
                    ((r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime <= searchEndDate) ||
                    (r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime >= searchEndDate) ||
                    (r.ReservationEndTime <= searchStartDate && r.ReservationEndTime <= searchEndDate)
                    ));

                    bool isReserved = reservations.Any(r => r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate);

                    string availabilityStatus = isReserved ? "reserved" : "available";


                    <div class="seat seat__B" parking-space-id="@item.Id" state="@availabilityStatus">@item.Location</div>
                }
                <div class="seat seat__B seat__Area"></div>
            </div>
        </div>
        <!-- parking lot area A -->
        <div class="row row__A">
            <div class="row">
                @foreach (var item in Model.ParkingSpaces.Where(p => p.Id >= 33 && p.Id <= 42))
                {
                    DateTime searchStartDate = DateTime.MinValue;
                    DateTime searchEndDate = DateTime.MaxValue;

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]))
                    {
                        searchStartDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]);
                    }

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]))
                    {
                        searchEndDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]);
                    }

                    var reservations = Model.Reservations.Where(r => r.ParkingSpaceId == item.Id &&
                    ((r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime <= searchEndDate) ||
                    (r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime >= searchEndDate) ||
                    (r.ReservationEndTime <= searchStartDate && r.ReservationEndTime <= searchEndDate)
                    ));

                    bool isReserved = reservations.Any(r => r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate);

                    string availabilityStatus = isReserved ? "reserved" : "available";

                    <div class="seat seat__A" parking-space-id="@item.Id" state="@availabilityStatus">@item.Location</div>
                }
                <div class="seat seat__A seat__Area">Area A</div>
            </div>
            <div class="row">
                @foreach (var item in Model.ParkingSpaces.Where(p => p.Id >= 43 && p.Id <= 53))
                {
                    DateTime searchStartDate = DateTime.MinValue;
                    DateTime searchEndDate = DateTime.MaxValue;

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]))
                    {
                        searchStartDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]);
                    }

                    if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]))
                    {
                        searchEndDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]);
                    }

                    var reservations = Model.Reservations.Where(r => r.ParkingSpaceId == item.Id &&
                    ((r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime <= searchEndDate) ||
                    (r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                    (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime >= searchEndDate) ||
                    (r.ReservationEndTime <= searchStartDate && r.ReservationEndTime <= searchEndDate)
                    ));

                    bool isReserved = reservations.Any(r => r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate);

                    string availabilityStatus = isReserved ? "reserved" : "available";

                    <div class="seat seat__A" parking-space-id="@item.Id" state="@availabilityStatus">@item.Location</div>
                }
                <div class="seat seat__A seat__Area"></div>
            </div>
        </div>

        <!-- parking lot area D -->
        <div class="row row__D">
            @foreach (var item in Model.ParkingSpaces.Where(p => p.Id >= 54 && p.Id <= 58))
            {
                DateTime searchStartDate = DateTime.MinValue;
                DateTime searchEndDate = DateTime.MaxValue;

                if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]))
                {
                    searchStartDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchStartDate"]);
                }

                if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]))
                {
                    searchEndDate = DateTime.Parse(HttpContextAccessor.HttpContext.Request.Query["searchEndDate"]);
                }

                var reservations = Model.Reservations.Where(r => r.ParkingSpaceId == item.Id &&
                ((r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate) ||
                (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime <= searchEndDate) ||
                (r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchEndDate) ||
                (r.ReservationStartTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                (r.ReservationStartTime <= searchStartDate && r.ReservationEndTime >= searchStartDate && r.ReservationEndTime <= searchEndDate) ||
                (r.ReservationStartTime >= searchStartDate && r.ReservationStartTime >= searchEndDate) ||
                (r.ReservationEndTime <= searchStartDate && r.ReservationEndTime <= searchEndDate)
                ));

                bool isReserved = reservations.Any(r => r.ReservationStartTime <= searchEndDate && r.ReservationEndTime >= searchStartDate);

                string availabilityStatus = isReserved ? "reserved" : "available";

                <div class="seat seat__D" parking-space-id="@item.Id" state="@availabilityStatus">@item.Location</div>
            }
            <div class="seat seat__D seat__Area">Area D</div>
        </div>
    </div>
</div>